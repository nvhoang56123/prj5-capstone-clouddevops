# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.2.0

executors:
  hnguyen3-executor:
    docker:
      - image: python:3.7.3-stretch

jobs:
  prepare:
    executor:  hnguyen3-executor
    steps:
      - checkout      
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Install python dependencies
          working_directory: .
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths:
            - ./venv
          key: dependencies-{{ checksum "requirements.txt" }}
  lint:
    executor:  hnguyen3-executor
    steps:
      - checkout      
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Install hadolint and lint - Prepare for the tests
          working_directory: .
          command: |          
            . venv/bin/activate
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

            # Install pylint
            pip install pylint
            chmod +x  venv/bin/pylint     
      # run lint tests!
      - run:
          name: Run Tests
          command: |            
            echo "We gonna test Dockerfile"
            /bin/hadolint Dockerfile

            echo "We gonna test app.py"
            venv/bin/pylint --disable=R,C,W,E app.py 
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - save_cache:
          paths:
            - ./venv
          key: dependencies-{{ checksum "requirements.txt" }}

  build:
    docker:
      - image: cimg/python:3.11.4
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
        default: "CapstoneEKS-902639937869"
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
      - kubernetes/install-kubectl
      - run:
          name: Configure variable
          command: |
            echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> .env
            echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> .env
            echo DOCKER_HUB_PASSWORD=$DOCKER_HUB_PASSWORD >> .env
            echo DOCKER_HUB_USERNAME=$DOCKER_HUB_USERNAME >> .env
            cat .env
      - run:
          name: Docker login
          command: |
            docker login -u "$DOCKER_HUB_USERNAME" -p $(echo "$DOCKER_HUB_PASSWORD")
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i caches/prj5-capstone-clouddevops.tar | true
      - run:
          name: Build application Docker image
          command: docker build --cache-from=prj5-capstone-clouddevops -t prj5-capstone-clouddevops .
      - run:
          name: Save Docker image layer cache
          command: |
            chmod -R 777 .
            mkdir -p caches
            docker save -o caches/prj5-capstone-clouddevops.tar prj5-capstone-clouddevops
      - run:
          name: Push Docker Image
          command: |
            docker tag prj5-capstone-clouddevops $DOCKER_HUB_USERNAME/prj5-capstone-clouddevops
            docker push $DOCKER_HUB_USERNAME/prj5-capstone-clouddevops

  deploy:
    docker:
      - image: cimg/python:3.11.4
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
        default: "CapstoneEKS-902639937869"
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_ACCESS_SECRET
          aws-region: AWS_REGION_NAME
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: ./kubernetes/deployment.yml
          resource-name: deployment/prj5-capstone-clouddevops
          get-rollout-status: true
          show-kubectl-command: true
      - kubernetes/create-or-update-resource:
          resource-file-path: ./kubernetes/aws-authen-cm.yml
          resource-name: configmap/aws-auth
      - run:
          name: Test cluster
          command: |
            kubectl get nodes
            kubectl get deployment
            kubectl get pod -o wide
            kubectl get services
      - run:
          name: Cleaning up
          command: docker system prune
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  prj5-capstone-clouddevops:
    jobs:
      - prepare
      - lint:
          requires:
            - "prepare"
      - build:
          requires:
            - "lint"
      - deploy:
          requires:
            - "build"            